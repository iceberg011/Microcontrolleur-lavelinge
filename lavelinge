sbit LCD_RS at RC2_bit;
sbit LCD_EN at RC3_bit;
sbit LCD_D4 at RC4_bit;
sbit LCD_D5 at RC5_bit;
sbit LCD_D6 at RC6_bit;
sbit LCD_D7 at RC7_bit;

sbit LCD_RS_Direction at TRISC2_bit;
sbit LCD_EN_Direction at TRISC3_bit;
sbit LCD_D4_Direction at TRISC4_bit;
sbit LCD_D5_Direction at TRISC5_bit;
sbit LCD_D6_Direction at TRISC6_bit;
sbit LCD_D7_Direction at TRISC7_bit;

sbit BUTTON_START at RB0_bit;
sbit BUTTON_START_Direction at TRISB0_bit;
sbit BUTTON_EXPRESS at RB4_bit;
sbit BUTTON_EXPRESS_Direction at TRISB4_bit;
sbit BUTTON_LAVAGE at RB6_bit;
sbit BUTTON_LAVAGE_Direction at TRISB6_bit;
sbit BUTTON_SECHAGE at RB5_bit;
sbit BUTTON_SECHAGE_Direction at TRISB5_bit;
sbit BUTTON_ESSORAGE at RB7_bit;
sbit BUTTON_ESSORAGE_Direction at TRISB7_bit;
sbit BUTTON_MODE at RA4_bit;
sbit BUTTON_MODE_Direction at TRISA4_bit;
sbit DOOR at RD6_bit;
sbit DOOR_Direction at TRISD6_bit;
sbit LED_BLUE at RD1_bit;
sbit LED_BLUE_Direction at TRISD1_bit;
sbit LED_YELLOW at RD2_bit;
sbit LED_YELLOW_Direction at TRISD2_bit;
sbit LED_GREEN at RD7_bit;
sbit LED_GREEN_Direction at TRISD7_bit;
sbit BUZZER at RD0_bit;
sbit BUZZER_Direction at TRISD0_bit;
sbit MOTOR at RA2_bit;
sbit MOTOR_Direction at TRISA2_bit;
sbit DEBUG at RD3_bit;
sbit DEBUG_Direction at TRISD3_bit;

unsigned int adc_temp, adc_level;
unsigned int temperature;
unsigned short niveau_percent;
char txt_temp[7], txt_lvl[7];
bit express_flag;
bit lavage_flag;
bit sechage_flag;
bit essorage_flag;
bit system_started;
bit end_cycle_flag;
unsigned char state;
unsigned char last_mode;
unsigned char blink_count;
unsigned short express_count = 0;
unsigned short lavage_count = 0;
unsigned short essorage_count = 0;
unsigned short sechage_count = 0;
unsigned short buzzer_count = 0;
unsigned char buzzer_active = 0;
unsigned char history_phase = 0;
unsigned short history_timer = 0;
int update_display = 0;

#define IDLE_STATE 0
#define EXPRESS_STATE 1
#define LAVAGE_STATE 2
#define SECHAGE_STATE 3
#define ESSORAGE_STATE 4
#define END_CYCLE_STATE 5
#define BLINK_LED_STATE 6
#define BUZZER_STATE 7

void afficher_modes() {
    Lcd_Cmd(_LCD_CLEAR);
    Lcd_Out(1, 1, "1/X");
    Lcd_Out(1, 9, "2/D");
    Delay_ms(500);
    Lcd_Cmd(_LCD_CLEAR);
    Lcd_Out(1, 1, "3/V");
    Lcd_Out(1, 9, "4/S");
    Delay_ms(500);
    Lcd_Cmd(_LCD_CLEAR);
}

void interrupt() {
    if (INTCON.RBIF) {
        if (BUTTON_EXPRESS == 0) {
            Delay_ms(20);
            if (BUTTON_EXPRESS == 0) {
                express_flag = 1;
                DEBUG = 1; Delay_ms(5); DEBUG = 0;
            }
        }
        if (BUTTON_LAVAGE == 0) {
            Delay_ms(20);
            if (BUTTON_LAVAGE == 0) {
                lavage_flag = 1;
                DEBUG = 1; Delay_ms(5); DEBUG = 0;
            }
        }
        if (BUTTON_SECHAGE == 0) {
            Delay_ms(20);
            if (BUTTON_SECHAGE == 0) {
                sechage_flag = 1;
                DEBUG = 1; Delay_ms(5); DEBUG = 0;
            }
        }
        if (BUTTON_ESSORAGE == 0) {
            Delay_ms(20);
            if (BUTTON_ESSORAGE == 0) {
                essorage_flag = 1;
                DEBUG = 1; Delay_ms(5); DEBUG = 0;
            }
        }
        INTCON.RBIF = 0;
    }
    if (INTCON.T0IF) {
        INTCON.T0IF = 0;
        if (history_phase == 0) {
            history_phase = 1;
            history_timer = 0;
            update_display = 1;
        } else if (history_phase == 1) {
            history_phase = 2;
            history_timer = 0;
            update_display = 1;
        }
        TMR0 = 254;
        DEBUG = 1; Delay_ms(5); DEBUG = 0;
    }
}

void main() {
    TRISA = 0b00010011;
    TRISB = 0b11111001;
    TRISC = 0x00;
    TRISD = 0x00;
    PORTA = 0;
    PORTB = 0xFF;
    PORTC = 0;
    PORTD = 0;

    OPTION_REG = 0b00110000;
    INTCON.GIE = 1;
    INTCON.RBIE = 1;
    INTCON.RBIF = 0;
    INTCON.T0IE = 1;
    INTCON.T0IF = 0;
    TMR0 = 254;
    PORTB;

    ADC_Init();
    Delay_ms(5);
    Lcd_Init();
    Lcd_Cmd(_LCD_CURSOR_OFF);
    Delay_ms(5);

    // Write initial EEPROM thresholds
    EEPROM_Write(0x00, 30); // Express temp: 30 째C
    Delay_ms(5);
    EEPROM_Write(0x01, 50); // Express level: 50 %
    Delay_ms(5);
    EEPROM_Write(0x02, 40); // Lavage temp: 40 째C
    Delay_ms(5);
    EEPROM_Write(0x03, 60); // Lavage level: 60 %
    Delay_ms(5);
    EEPROM_Write(0x04, 70); // Sechage temp: 70 째C
    Delay_ms(5);
    EEPROM_Write(0x05, 0);  // Sechage level: 0 %
    Delay_ms(5);
    EEPROM_Write(0x06, 20); // Essorage temp: 20 째C
    Delay_ms(5);
    EEPROM_Write(0x07, 20); // Essorage level: 20 %
    Delay_ms(5);

    BUZZER = 0; buzzer_active = 0; buzzer_count = 0;

    while (BUTTON_START == 1) {
        Delay_ms(5);
    }
    Delay_ms(20);
    if (BUTTON_START == 0) {
        system_started = 1;
        BUZZER = 1;
        Delay_ms(500);
        BUZZER = 0;
    }

    Lcd_Cmd(_LCD_CLEAR);
    Lcd_Out(1, 1, "Start");
    Lcd_Out(2, 1, "Mode");
    Delay_ms(500);
    afficher_modes();

    Lcd_Cmd(_LCD_CLEAR);
    Lcd_Out(1, 1, "T:");
    Lcd_Out(2, 1, "N:");
    Lcd_Out(2, 10, "S:");

    express_flag = 0;
    lavage_flag = 0;
    sechage_flag = 0;
    essorage_flag = 0;
    end_cycle_flag = 0;
    state = IDLE_STATE;
    last_mode = 0;
    blink_count = 0;
    history_phase = 0;
    history_timer = 0;
    update_display = 0;

    while (1) {
        // Display updates
        if (update_display) {
            if (history_phase == 1) {
                Lcd_Cmd(_LCD_CLEAR);
                Lcd_Out(1, 1, "X=");
                WordToStr(express_count, txt_temp);
                Lcd_Out(1, 5, Ltrim(txt_temp));
                Lcd_Out(2, 1, "V=");
                WordToStr(lavage_count, txt_temp);
                Lcd_Out(2, 5, Ltrim(txt_temp));
                Delay_ms(500);
            } else if (history_phase == 2) {
                Lcd_Cmd(_LCD_CLEAR);
                Lcd_Out(1, 1, "S=");
                WordToStr(essorage_count, txt_temp);
                Lcd_Out(1, 5, Ltrim(txt_temp));
                Lcd_Out(2, 1, "D=");
                WordToStr(sechage_count, txt_temp);
                Lcd_Out(2, 5, Ltrim(txt_temp));
                Delay_ms(500);
            }
            update_display = 0;
        }

        // RA4 history display management
        if (history_phase == 1) {
            history_timer++;
            if (history_timer >= 20) {
                history_phase = 0;
                history_timer = 0;
                update_display = 1;
            }
        } else if (history_phase == 2) {
            history_timer++;
            if (history_timer >= 20) {
                history_phase = 0;
                history_timer = 0;
                update_display = 1;
            }
        }

        // Normal display
        if (history_phase == 0 && update_display) {
            Lcd_Cmd(_LCD_CLEAR);
            Lcd_Out(1, 1, "T:");
            Lcd_Out(2, 1, "N:");
            Lcd_Out(2, 10, "S:");
            update_display = 0;
        }

        // Read ADC
        adc_temp = ADC_Read(0);
        adc_level = ADC_Read(1);
        temperature = (adc_temp * 5000UL / 1023) / 10;
        niveau_percent = (adc_level * 100UL) / 1023;
        DEBUG = 1; Delay_ms(5); DEBUG = 0;

        // Display temperature and level
        if (history_phase == 0) {
            WordToStr(temperature, txt_temp);
            Lcd_Out(1, 5, Ltrim(txt_temp));
            Lcd_Chr(1, 9, 'C');
            ByteToStr(niveau_percent, txt_lvl);
            Lcd_Out(2, 5, Ltrim(txt_lvl));
            Lcd_Chr(2, 9, '%');
        }

        // State machine
        switch (state) {
            case IDLE_STATE:
                if (!system_started) {
                    Lcd_Cmd(_LCD_CLEAR);
                    Lcd_Out(1, 1, "Start");
                    Lcd_Out(2, 1, "Push");
                } else if (express_flag || BUTTON_EXPRESS == 0) {
                    express_flag = 0;
                    if (temperature >= EEPROM_Read(0x00) && niveau_percent >= EEPROM_Read(0x01)) {
                        Delay_ms(5);
                        state = EXPRESS_STATE;
                        last_mode = EXPRESS_STATE;
                        MOTOR = 1;
                        DOOR = 1;
                        Lcd_Out(2, 12, "X");
                    } else {
                        Lcd_Out(2, 12, "E");
                        DOOR = 1;
                    }
                } else if (lavage_flag || BUTTON_LAVAGE == 0) {
                    lavage_flag = 0;
                    if (temperature >= EEPROM_Read(0x02) && niveau_percent >= EEPROM_Read(0x03)) {
                        Delay_ms(5);
                        state = LAVAGE_STATE;
                        last_mode = LAVAGE_STATE;
                        MOTOR = 1;
                        DOOR = 1;
                        Lcd_Out(2, 12, "V");
                    } else {
                        Lcd_Out(2, 12, "E");
                        DOOR = 1;
                    }
                } else if (sechage_flag || BUTTON_SECHAGE == 0) {
                    sechage_flag = 0;
                    if (temperature >= EEPROM_Read(0x04) && niveau_percent >= EEPROM_Read(0x05)) {
                        Delay_ms(5);
                        state = SECHAGE_STATE;
                        last_mode = SECHAGE_STATE;
                        MOTOR = 1;
                        DOOR = 1;
                        Lcd_Out(2, 12, "D");
                    } else {
                        Lcd_Out(2, 12, "E");
                        DOOR = 1;
                    }
                } else if (essorage_flag || BUTTON_ESSORAGE == 0) {
                    essorage_flag = 0;
                    if (temperature <= EEPROM_Read(0x06) && niveau_percent >= EEPROM_Read(0x07)) {
                        Delay_ms(5);
                        state = ESSORAGE_STATE;
                        last_mode = ESSORAGE_STATE;
                        MOTOR = 1;
                        DOOR = 1;
                        Lcd_Out(2, 12, "S");
                    } else {
                        Lcd_Out(2, 12, "E");
                        DOOR = 1;
                    }
                } else {
                    MOTOR = 0;
                    Lcd_Out(2, 12, "O");
                    DOOR = 1;
                }
                break;

            case EXPRESS_STATE:
                Delay_ms(2000);
                MOTOR = 0;
                state = END_CYCLE_STATE;
                end_cycle_flag = 1;
                break;

            case LAVAGE_STATE:
                Delay_ms(5000);
                MOTOR = 0;
                state = END_CYCLE_STATE;
                end_cycle_flag = 1;
                break;

            case SECHAGE_STATE:
                Delay_ms(3000);
                MOTOR = 0;
                state = END_CYCLE_STATE;
                end_cycle_flag = 1;
                break;

            case ESSORAGE_STATE:
                Delay_ms(1000);
                MOTOR = 0;
                state = END_CYCLE_STATE;
                end_cycle_flag = 1;
                break;

            case END_CYCLE_STATE:
                if (end_cycle_flag) {
                    state = BLINK_LED_STATE;
                    blink_count = 0;
                    end_cycle_flag = 0;
                }
                break;

            case BLINK_LED_STATE:
                if (blink_count < 3) {
                    if (last_mode == EXPRESS_STATE) {
                        LED_BLUE = 1;
                        LED_YELLOW = 1;
                        Delay_ms(200);
                        LED_BLUE = 0;
                        LED_YELLOW = 0;
                        Delay_ms(200);
                    } else if (last_mode == LAVAGE_STATE) {
                        LED_GREEN = 1;
                        Delay_ms(200);
                        LED_GREEN = 0;
                        Delay_ms(200);
                    } else if (last_mode == SECHAGE_STATE) {
                        LED_YELLOW = 1;
                        Delay_ms(200);
                        LED_YELLOW = 0;
                        Delay_ms(200);
                    } else if (last_mode == ESSORAGE_STATE) {
                        LED_BLUE = 1;
                        Delay_ms(200);
                        LED_BLUE = 0;
                        Delay_ms(200);
                    }
                    blink_count++;
                } else {
                    state = BUZZER_STATE;
                }
                break;

            case BUZZER_STATE:
                BUZZER = 1;
                buzzer_active = 1;
                buzzer_count = 2;
                DOOR = 0;
                if (last_mode == EXPRESS_STATE) {
                    express_count++;
                    EEPROM_Write(0x08, express_count & 0xFF);
                    Delay_ms(5);
                    EEPROM_Write(0x09, express_count >> 8);
                    Delay_ms(5);
                } else if (last_mode == LAVAGE_STATE) {
                    lavage_count++;
                    EEPROM_Write(0x0A, lavage_count & 0xFF);
                    Delay_ms(5);
                    EEPROM_Write(0x0B, lavage_count >> 8);
                    Delay_ms(5);
                } else if (last_mode == SECHAGE_STATE) {
                    sechage_count++;
                    EEPROM_Write(0x0C, sechage_count & 0xFF);
                    Delay_ms(5);
                    EEPROM_Write(0x0D, sechage_count >> 8);
                    Delay_ms(5);
                } else if (last_mode == ESSORAGE_STATE) {
                    essorage_count++;
                    EEPROM_Write(0x0E, essorage_count & 0xFF);
                    Delay_ms(5);
                    EEPROM_Write(0x0F, essorage_count >> 8);
                    Delay_ms(5);
                }
                state = IDLE_STATE;
                break;
        }

        // Buzzer management
        if (buzzer_active && buzzer_count > 0) {
            buzzer_count--;
            if (buzzer_count == 0) {
                BUZZER = 0;
                buzzer_active = 0;
            }
        }

        // Main loop delay
        if (!update_display) {
            Delay_ms(500);
        }
    }
}
